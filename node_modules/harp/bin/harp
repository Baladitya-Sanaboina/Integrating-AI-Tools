#!/usr/bin/env node

var argv    = require('minimist')(process.argv.slice(2))
var pkg     = require("../package.json")
var colors  = require("@colors/colors")
var path    = require("path")
var boxt    = require("boxt")


var box = (...args) => console.log(boxt(...args).split("\n").join("\n "));

var help = function(){

  var log = function(){
    var arr = Array.prototype.slice.call(arguments);
    console.log.apply(this, [" "].concat(arr))
  }

  var box = (...args) => console.log(boxt(...args).split("\n").join("\n "));

  log()
  log("Harp".underline.blue, "ã€œ".grey, pkg.description.brightYellow, "v".grey + pkg.version.grey)
  log()
  // log("Server | Generator | Bundler".grey)
  // log()
  log("USAGE".grey)
  log("  harp <source>                                   serves project locally")
  log("  harp <source> <build>                           compiles for static host")
  log()
  log("OPTIONS".grey)
  log("  -p, --port                      " +"9000".blue +"            server port to listen on")
  log("  -h, --host                      " +"0.0.0.0".blue +"         server host to answer to")
  log("  -s, --silent                    " +"false".grey +"           supresses logs")
  // log("  -c, --cache                     " +"false".blue +"           server memory cache")
  // log("  -t, --pretty                    " +"false".blue +"           server/compile keep whitespace")
  log("  -h, --help                                      outputs this help message")
  log("  -v, --version                                   outputs version of harp")
  box(
`${'PROCESSING'.grey }                          ${'DATA'.grey }                                   
  ${'.ejs  ->  .html' }                     ${'_data.json  -  directory data' }     
  ${'.jade ->  .html' }                     ${'_data.js    -  dynamic build data' }
  ${'.md   ->  .html' }
  ${'.sass ->  .css ' }                   ${'GENERATION'.grey }
  ${'.scss ->  .css ' }                     ${'partial("_path/to/partial", {' }
  ${'.cjs  ->  .js  ' }                     ${'  "title": "Hello World"' }
  ${'.jsx  ->  .js  ' }                     ${'})' }`
, { color: 'grey', padding: 2, theme: 'round', align:"left"});

}


var version = function(){
  console.log("v" + pkg.version)
}


/**
 * version
 */

if (argv.version || argv.v) return version()


/**
 * help
 */

if ((argv["_"].length === 0) || argv.help || argv.h) return help()





var harp = require("../")


var duration = function(d){
  if (d[0] < 1){
    var ms = d[1].toString().substring(0,3)
    return  + ms + "ms"
  } else {
    var ms = d[1].toString().substring(0,1)
    return [d[0], ms].join(".") + "s"
  }
}

/**
 * Server
 */

if (argv["_"].length === 1){
  const serverStart = process.hrtime()
  
  argv.log        = !(argv.silent || argv.s)
  var projectPath = path.resolve(process.cwd(), argv["_"][0])
  var host        = argv.host || '0.0.0.0'
  var port        = argv.port || 9000
  
  var server      = harp.server(projectPath, argv)

  server.listen(port, host, function(error){
    if (error) process.exit(1)

    var serverReady = process.hrtime(serverStart)

    box(
    `${ 'Harp'.blue } ${ ('v' + pkg.version).grey}                                        
${ ('http://localhost:' + port + "/").underline.cyan }
${ duration(serverReady).grey }`, { align: "left", color: "grey", padding: 3 })

  })
}


/**
 * Compile
 */

if (argv["_"].length === 2){
  argv.log        = !(argv.silent || argv.s)

  var projectPath = path.resolve(process.cwd(), argv["_"][0])
  var buildPath   = path.resolve(process.cwd(), argv["_"][1])

  console.log()
  console.log(" ", `Harp v${ pkg.version }`.yellow)
  console.log(" ", "Generating Site & Bundling Assets...".blue)
  if (argv.log) console.log()

  harp.compile(projectPath, buildPath, argv, function(errors, output){
    if(errors) {
      console.log(JSON.stringify(errors, null, 2))
      process.exit(1)
    }
    
    if (argv.log) console.log()
    console.log(" ", "Done!".green, `(${ duration(output.stats.duration) })`.grey)
    console.log()
  })

}

